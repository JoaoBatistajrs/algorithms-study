def binary_search(lst, number):
    low = 0
    high = len(lst) - 1
    steps = 0  # Contador de tentativas

    while low <= high:
        steps += 1  # Incrementa o contador a cada itera√ß√£o
        mid = (low + high) // 2  # Pega o meio da lista
        guess = lst[mid]

        if guess == number:
            return mid, steps  # Retorna o √≠ndice e a quantidade de tentativas
        if guess > number:
            high = mid - 1
        else:
            low = mid + 1

    return None, steps  # Se n√£o encontrar, retorna None e o n√∫mero de tentativas


# Criando listas com 128 e 256 elementos
my_list_128 = list(range(1, 129))  # [1, 2, 3, ..., 128]
my_list_256 = list(range(1, 257))  # [1, 2, 3, ..., 256]

# Testando a busca para um n√∫mero no meio da lista
index_128, attempts_128 = binary_search(my_list_128, 64)
index_256, attempts_256 = binary_search(my_list_256, 128)

print(f"Lista com 128 elementos: Encontrado no √≠ndice {index_128} em {attempts_128} tentativas.")
print(f"Lista com 256 elementos: Encontrado no √≠ndice {index_256} em {attempts_256} tentativas.")

#O Big O da pesquisa bin√°ria √© O(log n) (logaritmo de base 2).

# Explica√ß√£o:
# A cada itera√ß√£o, a busca bin√°ria divide o espa√ßo de busca pela metade.

# Isso significa que, se tivermos 
# ùëõ
# n elementos, o n√∫mero m√°ximo de compara√ß√µes necess√°rias √© log 2 n.


# Esse crescimento logar√≠tmico faz com que a busca bin√°ria seja muito eficiente mesmo para grandes conjuntos de dados.

# Compara√ß√£o com outros algoritmos de busca:
# Algoritmo	Complexidade	Exemplo (n = 1.000.000)
# Busca linear	O(n)	1.000.000 compara√ß√µes (pior caso)
# Busca bin√°ria	O(log n)	~20 compara√ß√µes
# Se tivermos uma lista com 1.000.000 de elementos:

# Busca linear (O(n)) ‚Üí No pior caso, precisa de 1.000.000 compara√ß√µes.

# Busca bin√°ria (O(log n)) ‚Üí Precisa de apenas 20 compara√ß√µes!

# Isso mostra o quanto a busca bin√°ria √© eficiente para grandes conjuntos de dados.